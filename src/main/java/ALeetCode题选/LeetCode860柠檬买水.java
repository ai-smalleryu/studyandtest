package ALeetCode题选;

/**
 * 在柠檬水摊上，每一杯柠檬水的售价为 5 美元。
 *
 * 顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
 *
 * 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
 *
 * 注意，一开始你手头没有任何零钱。
 *
 * 如果你能给每位顾客正确找零，返回 true ，否则返回 false 。
 *
 * 示例 1：
 *
 * 输入：[5,5,5,10,20]
 * 输出：true
 * 解释：
 * 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
 * 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
 * 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
 * 由于所有客户都得到了正确的找零，所以我们输出 true。
 */
public class LeetCode860柠檬买水 {
    public static boolean lemonadeChange(int[] bills) {
        //统计店员所拥有的5元和10元的数量（20元的不需要统计，
        //因为顾客只能使用5元，10元和20元，而20元是没法
        // 给顾客找零的）
        int five = 0, ten = 0;
        for (int bill : bills) {
            if (bill == 5) {
                //如果顾客使用的是5元，不用找零，5元数量加1
                five++;
            } else if (bill == 10) {
                //如果顾客使用的是10元，需要找他5元，所以
                //5元数量减1,10元数量加1
                five--;
                ten++;
            } else if (ten > 0) {
                //否则顾客使用的只能是20元，顾客使用20元的时候，
                //如果我们有10元的，要尽量先给他10元的，然后再
                //给他5元的，所以这里5元和10元数量都要减1
                ten--;
                five--;
            } else {
                //如果顾客使用的是20元，而店员没有10元的，
                //就只能给他找3个5元的，所以5元的数量要减3
                five -= 3;
            }

            //上面我们找零的时候并没有判断5元的数量，如果5元的
            //数量小于0，说明上面某一步找零的时候5元的不够了，
            //也就是说没法给顾客找零，直接返回false即可
            if (five < 0) {
                return false;
            }
        }
        return true;
    }

    public boolean lemonadeChange2(int[] bills) {
        //统计手头的零钱，20元的***对找零没用，不统计
        int coin5 = 0, coin10 = 0;
        for (int i = 0; i < bills.length; i++) {
            int bill = bills[i];
            switch (bill) {
                case 5:
                    coin5++;
                    break;

                case 10:
                    while (bill > 5) {
                        if (coin5 <= 0) {
                            return false;
                        }
                        coin5--;
                        bill -= 5;
                    }
                    coin10++;
                    break;

                case 20:
                    while (bill > 5) {
                        //因为20找零必须用到至少一张5元，没有就gg了
                        if (coin5 <= 0) {
                            return false;
                        }
                        //优先找10元的
                        if (bill == 10 || coin10 <= 0) {
                            coin5--;
                            bill -= 5;
                        } else {
                            coin10--;
                            bill -= 10;
                        }
                    }
                    break;
            }
        }
        return true;
    }

    public static boolean lemonadeChange3(int[] bills) {
        int coin5 = 0; //计数5的张数
        int coin10 = 0; //10的张数
        for (int i = 0; i < bills.length; i++) {
            int bill = bills[i];
            switch (bill) {
                case 5:
                    //直接收入张数+1
                    coin5++;
                    break;

                case 10:
                    //找钱一张减一
                    coin5--;
                    //十元张数+1
                    coin10++;
                    break;

                case 20:
                    if (coin10 > 0) {
                        coin5--;
                        coin10--;
                    } else {
                        coin5 -= 3;
                    }
                    break;
            }
            if (coin5 < 0) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        //[5,5,10,10,20]
        int[] a = new int[]{
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20,
                5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20, 5, 10, 5, 20};
        int[] sa = new int[]{5, 10, 5, 20,};
        int[] sa2 = new int[]{5, 5, 10, 10, 20};
        int[] sa3 = new int[]{5,5,5,5,20,20,5,5,5,5};
        boolean b = lemonadeChange3(sa3);
        System.out.println(b);
    }


}